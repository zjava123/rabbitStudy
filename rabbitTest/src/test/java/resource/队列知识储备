
声明和创建队列
channel.queueDeclare(QUEUE_MESSAGE,false,false,false,null);
原方法: void basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body) throws IOException;

参数含义:
  queueDeclare(String queue, boolean durable,boolean exclusive,boolean autoDelete, Map<String, Object> arguments);
  
  queue: 队列名称

  durable： 是否持久化, 队列的声明默认是存放到内存中的，
  如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，
  保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库
  
  exclusive：是否排外的，有两个作用：
  一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private
  ，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，
  其他通道channel是不能访问的，如果强制访问会报异常：
  com.rabbitmq.client.ShutdownSignalException: channel error; protocol method:
  一般等于true的话用于一个队列只能有一个消费者来消费的场景
  
  autoDelete：是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，
  可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除
  在什么时候会自动删除可以参考资源文档
		  
		  
		


队列中的消息什么时候会自动被删除？
Message TTL(x-message-ttl)：设置队列中的所有消息的生存周期(统一为整个队列的所有消息设置生命周期), 也可以在发布消息的时候单独为某个消息指定剩余生存时间,单位毫秒, 类似于redis中的ttl，生存时间到了，消息会被从队里中删除，注意是消息被删除，而不是队列被删除， 特性Features=TTL, 单独为某条消息设置过期时间AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties().builder().expiration(“6000”);
channel.basicPublish(EXCHANGE_NAME, “”, properties.build(), message.getBytes(“UTF-8”));

Auto Expire(x-expires): 当队列在指定的时间没有被访问(consume, basicGet, queueDeclare…)就会被删除,Features=Exp

Max Length(x-max-length): 限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉， 类似于mongodb中的固定集合，例如保存最新的100条消息, Feature=Lim

Max Length Bytes(x-max-length-bytes): 限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小, Features=Lim B

Dead letter exchange(x-dead-letter-exchange)： 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉,Features=DLX

Dead letter routing key(x-dead-letter-routing-key)：将删除的消息推送到指定交换机的指定路由键的队列中去, Feature=DLK

Maximum priority(x-max-priority)：优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费,

Lazy mode(x-queue-mode=lazy)： Lazy Queues: 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中

##注意
关于队列的声明，如果使用同一套参数进行声明了，就不能再使用其他参数来声明，要么删除该队列重新删除，可以使用命令行删除也可以在RabbitMQ Management上删除，要么给队列重新起一个名字。

消息生产者将消息发送给队列
channel.basicPublish("", QUEUE_MESSAGE, null, message.getBytes());
原方法:void basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body) throws IOException;

参数含义:
 String exchange -- 交换机名称
 String routingKey -- 路由关键字
 BasicProperties props -- 消息的基本属性，例如路由头等
 byte[] body -- 消息体

RabbitMQ中的概念，channel.basicQos(1)指该消费者在接收到队列里的消息但没有返回确认结果之前,
队列不会将新的消息分发给该消费者。队列中没有被消费的消息不会被删除，还是存在于队列中。
	
